
Copyright (C) 2011-2014 Pedro H. Penna <pedrohenriquepenna@gmail.com>

Kernel functionalities to be implemented:
	
	* xalloc()
	* file locking
	* nonblocking I/O

Things to be fixed:

	* signal() check death of child signal
	* execve() setuid when need
	* close() release inode and current directory
	* open() when creating new file allocate inode first than writing directory 
	* open() when truncating existing file do not change ownership
	* fork() check number of process per user

Things to be tested:

	* stress the block buffer pool

Things to be implemented:

	* when locking structures record pid so the lock can be re-entrant.
	
High priority system calls to be implemented:

	* sys_mknod()
	* sys_mount()
	* sys_times()
	* sys_ulimit()
	* sys_umount()
	* sys_ustat()
	* sys_utime()
	
Low priority system calls to be implemented:

	* sys_acct()
	* sys_msgctl()
	* sys_msgget()
	* sys_msgsnd()
	* sys_msgrcv()
	* sys_semctl()
	* sys_semget()
	* sys_semop()
	* sys_shmctl()
	* sys_shmget()
	* sys_shmop()
	* sys_plock()
	* sys_profil()
	* sys_ptrace()
	* sys_stime()
	* sys_time()

System calls to be tested:
	
	* sys_access()
	* sys_brk()
	* sys_close()
	* sys_chdir()
	* sys_chmod()
	* sys_chown()
	* sys_chroot()
	* sys_dup()
	* sys_execve()
	* sys_exit()
	* sys_fcntl()
	* sys_fork()
	* sys_ioctl()
	* sys_kill()
	* sys_link()
	* sys_lseek()
	* sys_open()
	* sys_pipe()
	* sys_umask()
	* sys_read()
	* sys_stat()
	* sys_sync()
	* sys_uname()
	* sys_unlink()
	* sys_write()
